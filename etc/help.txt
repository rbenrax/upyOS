upyOS Help: (Obsolete, see https://github.com/rbenrax/upyos for update help)

Developed by rbenrax, source available in https://github.com/rbenrax/upyOS, based in Krzysztof Krystian Jankowski ideas and work, available in smol.p1x.in/os/

Explanation:

The objective is to provide one more layer to micropython that allows us to manage a microcontroller in a similar way to what we use every day in a common computer, with the use of more simple programs that can be complemented in a more flexible way, obviously at the cost of lower performance and efficiency, but giving more facilities for those who start using microcontrollers.

Exists internal and external commands, and internal and externals shell scripts, internal located in /bin directory and are exceuted without extention, external can be located in any directory and are executed directly, external commands are self-explanatory and some have help (--h).

The system can be extended with more external commands and programs with the aim of keeping the memory footprint as low as possible, because the ram is quite small but the flash is big enough.

The sdata module contains all the system data, allowing access to the board configuration parameters, system configuration parameters, environment variables, etc., allowing access to these parameters between programs and scripts.

RP2040 has only two threads and is limited to this number, but ESP32 and others may have more. Python programs can be submitted in a separate thread by ending the command with '&' symbol, and asyncio programs may also be used."

Threads may be stopped by kill command, but then must be controlled in main loop inside the procces, see examples in /opt directory.

I hope it is useful for you!, there are things to do, and to improve.

Directories structure:

/
boot.py         Micropython statup file
main.py         Micropython statup file (boot system)

    /bin        Commands and shell scripts
    /etc        Configuration files
    /lib        System implementations libraries
    /libx       External libraries
    /opt        Specific solution or add-on programs (not in path)
    /tmp        Temporary directory (to put what you don't know where to put :-)

Shell script basic language:

Conditional execution:
if <arg1> <comparison operator> <arg2> <action> <acc arg>

<args>: String constant and environment variables (ex: $0, $?, $path, etc)
<comparison operator>: Like Python (==, <, >, etc)
<action>:
   - keyword: [run] <pgm>, Any program o command to run (ls, etc.)
   - keyword: skip <lines>, the number of lines to skip, empty lines included 
   - keyword: return, end script execution
   - Keyword: goto, goto to :label
   
Unconditional execution:
   - keyword: skip <lines>, the number of lines to skip, empty lines included 
   - keyword: return, end script execution
   - Keyword: goto, goto to :label
   
Internals commands:

loadconfig: Load system config file
loadboard:  Load board interfaces configuration file
r:          Repeat last command
exit:       Exit to Micropython shell
